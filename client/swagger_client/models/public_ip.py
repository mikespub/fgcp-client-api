# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class PublicIP(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PublicIP - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'address': 'str',
            'vsys_id': 'str',
            'href': 'str',
            '_class': 'str',
            'id': 'str',
            'v4v6_flag': 'str'
        }

        self.attribute_map = {
            'address': 'address',
            'vsys_id': 'vsysId',
            'href': 'href',
            '_class': '_class',
            'id': 'id',
            'v4v6_flag': 'v4v6Flag'
        }

        self._address = None
        self._vsys_id = None
        self._href = None
        self.__class = None
        self._id = None
        self._v4v6_flag = None

    @property
    def address(self):
        """
        Gets the address of this PublicIP.


        :return: The address of this PublicIP.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this PublicIP.


        :param address: The address of this PublicIP.
        :type: str
        """
        
        self._address = address

    @property
    def vsys_id(self):
        """
        Gets the vsys_id of this PublicIP.


        :return: The vsys_id of this PublicIP.
        :rtype: str
        """
        return self._vsys_id

    @vsys_id.setter
    def vsys_id(self, vsys_id):
        """
        Sets the vsys_id of this PublicIP.


        :param vsys_id: The vsys_id of this PublicIP.
        :type: str
        """
        
        self._vsys_id = vsys_id

    @property
    def href(self):
        """
        Gets the href of this PublicIP.


        :return: The href of this PublicIP.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this PublicIP.


        :param href: The href of this PublicIP.
        :type: str
        """
        
        self._href = href

    @property
    def _class(self):
        """
        Gets the _class of this PublicIP.


        :return: The _class of this PublicIP.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """
        Sets the _class of this PublicIP.


        :param _class: The _class of this PublicIP.
        :type: str
        """
        
        self.__class = _class

    @property
    def id(self):
        """
        Gets the id of this PublicIP.


        :return: The id of this PublicIP.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PublicIP.


        :param id: The id of this PublicIP.
        :type: str
        """
        
        self._id = id

    @property
    def v4v6_flag(self):
        """
        Gets the v4v6_flag of this PublicIP.


        :return: The v4v6_flag of this PublicIP.
        :rtype: str
        """
        return self._v4v6_flag

    @v4v6_flag.setter
    def v4v6_flag(self, v4v6_flag):
        """
        Sets the v4v6_flag of this PublicIP.


        :param v4v6_flag: The v4v6_flag of this PublicIP.
        :type: str
        """
        
        self._v4v6_flag = v4v6_flag

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other


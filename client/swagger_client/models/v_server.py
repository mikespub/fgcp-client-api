# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class VServer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        VServer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'creator': 'str',
            'vnics': 'list[VNic]',
            'vserver_type': 'str',
            'vserver_name': 'str',
            'vserver_id': 'str',
            'href': 'str',
            '_class': 'str',
            'id': 'str',
            'vdisks': 'list[VDisk]',
            'diskimage_id': 'str'
        }

        self.attribute_map = {
            'creator': 'creator',
            'vnics': 'vnics',
            'vserver_type': 'vserverType',
            'vserver_name': 'vserverName',
            'vserver_id': 'vserverId',
            'href': 'href',
            '_class': '_class',
            'id': 'id',
            'vdisks': 'vdisks',
            'diskimage_id': 'diskimageId'
        }

        self._creator = None
        self._vnics = None
        self._vserver_type = None
        self._vserver_name = None
        self._vserver_id = None
        self._href = None
        self.__class = None
        self._id = None
        self._vdisks = None
        self._diskimage_id = None

    @property
    def creator(self):
        """
        Gets the creator of this VServer.


        :return: The creator of this VServer.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """
        Sets the creator of this VServer.


        :param creator: The creator of this VServer.
        :type: str
        """
        
        self._creator = creator

    @property
    def vnics(self):
        """
        Gets the vnics of this VServer.


        :return: The vnics of this VServer.
        :rtype: list[VNic]
        """
        return self._vnics

    @vnics.setter
    def vnics(self, vnics):
        """
        Sets the vnics of this VServer.


        :param vnics: The vnics of this VServer.
        :type: list[VNic]
        """
        
        self._vnics = vnics

    @property
    def vserver_type(self):
        """
        Gets the vserver_type of this VServer.


        :return: The vserver_type of this VServer.
        :rtype: str
        """
        return self._vserver_type

    @vserver_type.setter
    def vserver_type(self, vserver_type):
        """
        Sets the vserver_type of this VServer.


        :param vserver_type: The vserver_type of this VServer.
        :type: str
        """
        
        self._vserver_type = vserver_type

    @property
    def vserver_name(self):
        """
        Gets the vserver_name of this VServer.


        :return: The vserver_name of this VServer.
        :rtype: str
        """
        return self._vserver_name

    @vserver_name.setter
    def vserver_name(self, vserver_name):
        """
        Sets the vserver_name of this VServer.


        :param vserver_name: The vserver_name of this VServer.
        :type: str
        """
        
        self._vserver_name = vserver_name

    @property
    def vserver_id(self):
        """
        Gets the vserver_id of this VServer.


        :return: The vserver_id of this VServer.
        :rtype: str
        """
        return self._vserver_id

    @vserver_id.setter
    def vserver_id(self, vserver_id):
        """
        Sets the vserver_id of this VServer.


        :param vserver_id: The vserver_id of this VServer.
        :type: str
        """
        
        self._vserver_id = vserver_id

    @property
    def href(self):
        """
        Gets the href of this VServer.


        :return: The href of this VServer.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this VServer.


        :param href: The href of this VServer.
        :type: str
        """
        
        self._href = href

    @property
    def _class(self):
        """
        Gets the _class of this VServer.


        :return: The _class of this VServer.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """
        Sets the _class of this VServer.


        :param _class: The _class of this VServer.
        :type: str
        """
        
        self.__class = _class

    @property
    def id(self):
        """
        Gets the id of this VServer.


        :return: The id of this VServer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this VServer.


        :param id: The id of this VServer.
        :type: str
        """
        
        self._id = id

    @property
    def vdisks(self):
        """
        Gets the vdisks of this VServer.


        :return: The vdisks of this VServer.
        :rtype: list[VDisk]
        """
        return self._vdisks

    @vdisks.setter
    def vdisks(self, vdisks):
        """
        Sets the vdisks of this VServer.


        :param vdisks: The vdisks of this VServer.
        :type: list[VDisk]
        """
        
        self._vdisks = vdisks

    @property
    def diskimage_id(self):
        """
        Gets the diskimage_id of this VServer.


        :return: The diskimage_id of this VServer.
        :rtype: str
        """
        return self._diskimage_id

    @diskimage_id.setter
    def diskimage_id(self, diskimage_id):
        """
        Sets the diskimage_id of this VServer.


        :param diskimage_id: The diskimage_id of this VServer.
        :type: str
        """
        
        self._diskimage_id = diskimage_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other


# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class VDisk(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        VDisk - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'creator': 'str',
            'size': 'str',
            'vdisk_name': 'str',
            'href': 'str',
            '_class': 'str',
            'id': 'str',
            'attached_to': 'str',
            'vdisk_id': 'str'
        }

        self.attribute_map = {
            'creator': 'creator',
            'size': 'size',
            'vdisk_name': 'vdiskName',
            'href': 'href',
            '_class': '_class',
            'id': 'id',
            'attached_to': 'attachedTo',
            'vdisk_id': 'vdiskId'
        }

        self._creator = None
        self._size = None
        self._vdisk_name = None
        self._href = None
        self.__class = None
        self._id = None
        self._attached_to = None
        self._vdisk_id = None

    @property
    def creator(self):
        """
        Gets the creator of this VDisk.


        :return: The creator of this VDisk.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """
        Sets the creator of this VDisk.


        :param creator: The creator of this VDisk.
        :type: str
        """
        
        self._creator = creator

    @property
    def size(self):
        """
        Gets the size of this VDisk.


        :return: The size of this VDisk.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this VDisk.


        :param size: The size of this VDisk.
        :type: str
        """
        
        self._size = size

    @property
    def vdisk_name(self):
        """
        Gets the vdisk_name of this VDisk.


        :return: The vdisk_name of this VDisk.
        :rtype: str
        """
        return self._vdisk_name

    @vdisk_name.setter
    def vdisk_name(self, vdisk_name):
        """
        Sets the vdisk_name of this VDisk.


        :param vdisk_name: The vdisk_name of this VDisk.
        :type: str
        """
        
        self._vdisk_name = vdisk_name

    @property
    def href(self):
        """
        Gets the href of this VDisk.


        :return: The href of this VDisk.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this VDisk.


        :param href: The href of this VDisk.
        :type: str
        """
        
        self._href = href

    @property
    def _class(self):
        """
        Gets the _class of this VDisk.


        :return: The _class of this VDisk.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """
        Sets the _class of this VDisk.


        :param _class: The _class of this VDisk.
        :type: str
        """
        
        self.__class = _class

    @property
    def id(self):
        """
        Gets the id of this VDisk.


        :return: The id of this VDisk.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this VDisk.


        :param id: The id of this VDisk.
        :type: str
        """
        
        self._id = id

    @property
    def attached_to(self):
        """
        Gets the attached_to of this VDisk.


        :return: The attached_to of this VDisk.
        :rtype: str
        """
        return self._attached_to

    @attached_to.setter
    def attached_to(self, attached_to):
        """
        Sets the attached_to of this VDisk.


        :param attached_to: The attached_to of this VDisk.
        :type: str
        """
        
        self._attached_to = attached_to

    @property
    def vdisk_id(self):
        """
        Gets the vdisk_id of this VDisk.


        :return: The vdisk_id of this VDisk.
        :rtype: str
        """
        return self._vdisk_id

    @vdisk_id.setter
    def vdisk_id(self, vdisk_id):
        """
        Sets the vdisk_id of this VDisk.


        :param vdisk_id: The vdisk_id of this VDisk.
        :type: str
        """
        
        self._vdisk_id = vdisk_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other


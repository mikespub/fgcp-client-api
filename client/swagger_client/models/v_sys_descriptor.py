# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class VSysDescriptor(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        VSysDescriptor - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'vsysdescriptor_name': 'str',
            'creator_name': 'str',
            'description': 'str',
            'registrant': 'str',
            'href': 'str',
            'vsysdescriptor_id': 'str',
            '_class': 'str',
            'id': 'str',
            'keyword': 'str'
        }

        self.attribute_map = {
            'vsysdescriptor_name': 'vsysdescriptorName',
            'creator_name': 'creatorName',
            'description': 'description',
            'registrant': 'registrant',
            'href': 'href',
            'vsysdescriptor_id': 'vsysdescriptorId',
            '_class': '_class',
            'id': 'id',
            'keyword': 'keyword'
        }

        self._vsysdescriptor_name = None
        self._creator_name = None
        self._description = None
        self._registrant = None
        self._href = None
        self._vsysdescriptor_id = None
        self.__class = None
        self._id = None
        self._keyword = None

    @property
    def vsysdescriptor_name(self):
        """
        Gets the vsysdescriptor_name of this VSysDescriptor.


        :return: The vsysdescriptor_name of this VSysDescriptor.
        :rtype: str
        """
        return self._vsysdescriptor_name

    @vsysdescriptor_name.setter
    def vsysdescriptor_name(self, vsysdescriptor_name):
        """
        Sets the vsysdescriptor_name of this VSysDescriptor.


        :param vsysdescriptor_name: The vsysdescriptor_name of this VSysDescriptor.
        :type: str
        """
        
        self._vsysdescriptor_name = vsysdescriptor_name

    @property
    def creator_name(self):
        """
        Gets the creator_name of this VSysDescriptor.


        :return: The creator_name of this VSysDescriptor.
        :rtype: str
        """
        return self._creator_name

    @creator_name.setter
    def creator_name(self, creator_name):
        """
        Sets the creator_name of this VSysDescriptor.


        :param creator_name: The creator_name of this VSysDescriptor.
        :type: str
        """
        
        self._creator_name = creator_name

    @property
    def description(self):
        """
        Gets the description of this VSysDescriptor.


        :return: The description of this VSysDescriptor.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this VSysDescriptor.


        :param description: The description of this VSysDescriptor.
        :type: str
        """
        
        self._description = description

    @property
    def registrant(self):
        """
        Gets the registrant of this VSysDescriptor.


        :return: The registrant of this VSysDescriptor.
        :rtype: str
        """
        return self._registrant

    @registrant.setter
    def registrant(self, registrant):
        """
        Sets the registrant of this VSysDescriptor.


        :param registrant: The registrant of this VSysDescriptor.
        :type: str
        """
        
        self._registrant = registrant

    @property
    def href(self):
        """
        Gets the href of this VSysDescriptor.


        :return: The href of this VSysDescriptor.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this VSysDescriptor.


        :param href: The href of this VSysDescriptor.
        :type: str
        """
        
        self._href = href

    @property
    def vsysdescriptor_id(self):
        """
        Gets the vsysdescriptor_id of this VSysDescriptor.


        :return: The vsysdescriptor_id of this VSysDescriptor.
        :rtype: str
        """
        return self._vsysdescriptor_id

    @vsysdescriptor_id.setter
    def vsysdescriptor_id(self, vsysdescriptor_id):
        """
        Sets the vsysdescriptor_id of this VSysDescriptor.


        :param vsysdescriptor_id: The vsysdescriptor_id of this VSysDescriptor.
        :type: str
        """
        
        self._vsysdescriptor_id = vsysdescriptor_id

    @property
    def _class(self):
        """
        Gets the _class of this VSysDescriptor.


        :return: The _class of this VSysDescriptor.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """
        Sets the _class of this VSysDescriptor.


        :param _class: The _class of this VSysDescriptor.
        :type: str
        """
        
        self.__class = _class

    @property
    def id(self):
        """
        Gets the id of this VSysDescriptor.


        :return: The id of this VSysDescriptor.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this VSysDescriptor.


        :param id: The id of this VSysDescriptor.
        :type: str
        """
        
        self._id = id

    @property
    def keyword(self):
        """
        Gets the keyword of this VSysDescriptor.


        :return: The keyword of this VSysDescriptor.
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """
        Sets the keyword of this VSysDescriptor.


        :param keyword: The keyword of this VSysDescriptor.
        :type: str
        """
        
        self._keyword = keyword

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other


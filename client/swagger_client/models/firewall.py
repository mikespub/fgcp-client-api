# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class Firewall(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Firewall - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'creator': 'str',
            'efm_id': 'str',
            'href': 'str',
            '_class': 'str',
            'id': 'str',
            'efm_type': 'str',
            'efm_name': 'str'
        }

        self.attribute_map = {
            'creator': 'creator',
            'efm_id': 'efmId',
            'href': 'href',
            '_class': '_class',
            'id': 'id',
            'efm_type': 'efmType',
            'efm_name': 'efmName'
        }

        self._creator = None
        self._efm_id = None
        self._href = None
        self.__class = None
        self._id = None
        self._efm_type = None
        self._efm_name = None

    @property
    def creator(self):
        """
        Gets the creator of this Firewall.


        :return: The creator of this Firewall.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """
        Sets the creator of this Firewall.


        :param creator: The creator of this Firewall.
        :type: str
        """
        
        self._creator = creator

    @property
    def efm_id(self):
        """
        Gets the efm_id of this Firewall.


        :return: The efm_id of this Firewall.
        :rtype: str
        """
        return self._efm_id

    @efm_id.setter
    def efm_id(self, efm_id):
        """
        Sets the efm_id of this Firewall.


        :param efm_id: The efm_id of this Firewall.
        :type: str
        """
        
        self._efm_id = efm_id

    @property
    def href(self):
        """
        Gets the href of this Firewall.


        :return: The href of this Firewall.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this Firewall.


        :param href: The href of this Firewall.
        :type: str
        """
        
        self._href = href

    @property
    def _class(self):
        """
        Gets the _class of this Firewall.


        :return: The _class of this Firewall.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """
        Sets the _class of this Firewall.


        :param _class: The _class of this Firewall.
        :type: str
        """
        
        self.__class = _class

    @property
    def id(self):
        """
        Gets the id of this Firewall.


        :return: The id of this Firewall.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Firewall.


        :param id: The id of this Firewall.
        :type: str
        """
        
        self._id = id

    @property
    def efm_type(self):
        """
        Gets the efm_type of this Firewall.


        :return: The efm_type of this Firewall.
        :rtype: str
        """
        return self._efm_type

    @efm_type.setter
    def efm_type(self, efm_type):
        """
        Sets the efm_type of this Firewall.


        :param efm_type: The efm_type of this Firewall.
        :type: str
        """
        
        self._efm_type = efm_type

    @property
    def efm_name(self):
        """
        Gets the efm_name of this Firewall.


        :return: The efm_name of this Firewall.
        :rtype: str
        """
        return self._efm_name

    @efm_name.setter
    def efm_name(self, efm_name):
        """
        Sets the efm_name of this Firewall.


        :param efm_name: The efm_name of this Firewall.
        :type: str
        """
        
        self._efm_name = efm_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other


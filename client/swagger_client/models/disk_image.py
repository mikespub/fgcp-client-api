# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class DiskImage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DiskImage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'softwares': 'list[ImageSoftware]',
            'creator_name': 'str',
            'description': 'str',
            'license_info': 'str',
            'os_name': 'str',
            'size': 'str',
            'diskimage_name': 'str',
            'os_type': 'str',
            'registrant': 'str',
            'href': 'str',
            '_class': 'str',
            'id': 'str',
            'diskimage_id': 'str'
        }

        self.attribute_map = {
            'softwares': 'softwares',
            'creator_name': 'creatorName',
            'description': 'description',
            'license_info': 'licenseInfo',
            'os_name': 'osName',
            'size': 'size',
            'diskimage_name': 'diskimageName',
            'os_type': 'osType',
            'registrant': 'registrant',
            'href': 'href',
            '_class': '_class',
            'id': 'id',
            'diskimage_id': 'diskimageId'
        }

        self._softwares = None
        self._creator_name = None
        self._description = None
        self._license_info = None
        self._os_name = None
        self._size = None
        self._diskimage_name = None
        self._os_type = None
        self._registrant = None
        self._href = None
        self.__class = None
        self._id = None
        self._diskimage_id = None

    @property
    def softwares(self):
        """
        Gets the softwares of this DiskImage.


        :return: The softwares of this DiskImage.
        :rtype: list[ImageSoftware]
        """
        return self._softwares

    @softwares.setter
    def softwares(self, softwares):
        """
        Sets the softwares of this DiskImage.


        :param softwares: The softwares of this DiskImage.
        :type: list[ImageSoftware]
        """
        
        self._softwares = softwares

    @property
    def creator_name(self):
        """
        Gets the creator_name of this DiskImage.


        :return: The creator_name of this DiskImage.
        :rtype: str
        """
        return self._creator_name

    @creator_name.setter
    def creator_name(self, creator_name):
        """
        Sets the creator_name of this DiskImage.


        :param creator_name: The creator_name of this DiskImage.
        :type: str
        """
        
        self._creator_name = creator_name

    @property
    def description(self):
        """
        Gets the description of this DiskImage.


        :return: The description of this DiskImage.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DiskImage.


        :param description: The description of this DiskImage.
        :type: str
        """
        
        self._description = description

    @property
    def license_info(self):
        """
        Gets the license_info of this DiskImage.


        :return: The license_info of this DiskImage.
        :rtype: str
        """
        return self._license_info

    @license_info.setter
    def license_info(self, license_info):
        """
        Sets the license_info of this DiskImage.


        :param license_info: The license_info of this DiskImage.
        :type: str
        """
        
        self._license_info = license_info

    @property
    def os_name(self):
        """
        Gets the os_name of this DiskImage.


        :return: The os_name of this DiskImage.
        :rtype: str
        """
        return self._os_name

    @os_name.setter
    def os_name(self, os_name):
        """
        Sets the os_name of this DiskImage.


        :param os_name: The os_name of this DiskImage.
        :type: str
        """
        
        self._os_name = os_name

    @property
    def size(self):
        """
        Gets the size of this DiskImage.


        :return: The size of this DiskImage.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this DiskImage.


        :param size: The size of this DiskImage.
        :type: str
        """
        
        self._size = size

    @property
    def diskimage_name(self):
        """
        Gets the diskimage_name of this DiskImage.


        :return: The diskimage_name of this DiskImage.
        :rtype: str
        """
        return self._diskimage_name

    @diskimage_name.setter
    def diskimage_name(self, diskimage_name):
        """
        Sets the diskimage_name of this DiskImage.


        :param diskimage_name: The diskimage_name of this DiskImage.
        :type: str
        """
        
        self._diskimage_name = diskimage_name

    @property
    def os_type(self):
        """
        Gets the os_type of this DiskImage.


        :return: The os_type of this DiskImage.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """
        Sets the os_type of this DiskImage.


        :param os_type: The os_type of this DiskImage.
        :type: str
        """
        
        self._os_type = os_type

    @property
    def registrant(self):
        """
        Gets the registrant of this DiskImage.


        :return: The registrant of this DiskImage.
        :rtype: str
        """
        return self._registrant

    @registrant.setter
    def registrant(self, registrant):
        """
        Sets the registrant of this DiskImage.


        :param registrant: The registrant of this DiskImage.
        :type: str
        """
        
        self._registrant = registrant

    @property
    def href(self):
        """
        Gets the href of this DiskImage.


        :return: The href of this DiskImage.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this DiskImage.


        :param href: The href of this DiskImage.
        :type: str
        """
        
        self._href = href

    @property
    def _class(self):
        """
        Gets the _class of this DiskImage.


        :return: The _class of this DiskImage.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """
        Sets the _class of this DiskImage.


        :param _class: The _class of this DiskImage.
        :type: str
        """
        
        self.__class = _class

    @property
    def id(self):
        """
        Gets the id of this DiskImage.


        :return: The id of this DiskImage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DiskImage.


        :param id: The id of this DiskImage.
        :type: str
        """
        
        self._id = id

    @property
    def diskimage_id(self):
        """
        Gets the diskimage_id of this DiskImage.


        :return: The diskimage_id of this DiskImage.
        :rtype: str
        """
        return self._diskimage_id

    @diskimage_id.setter
    def diskimage_id(self, diskimage_id):
        """
        Sets the diskimage_id of this DiskImage.


        :param diskimage_id: The diskimage_id of this DiskImage.
        :type: str
        """
        
        self._diskimage_id = diskimage_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other


# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ServerTypeCPU(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ServerTypeCPU - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'num_of_cpu': 'str',
            'cpu_arch': 'str',
            'href': 'str',
            '_class': 'str',
            'cpu_perf': 'str'
        }

        self.attribute_map = {
            'num_of_cpu': 'numOfCpu',
            'cpu_arch': 'cpuArch',
            'href': 'href',
            '_class': '_class',
            'cpu_perf': 'cpuPerf'
        }

        self._num_of_cpu = None
        self._cpu_arch = None
        self._href = None
        self.__class = None
        self._cpu_perf = None

    @property
    def num_of_cpu(self):
        """
        Gets the num_of_cpu of this ServerTypeCPU.


        :return: The num_of_cpu of this ServerTypeCPU.
        :rtype: str
        """
        return self._num_of_cpu

    @num_of_cpu.setter
    def num_of_cpu(self, num_of_cpu):
        """
        Sets the num_of_cpu of this ServerTypeCPU.


        :param num_of_cpu: The num_of_cpu of this ServerTypeCPU.
        :type: str
        """
        
        self._num_of_cpu = num_of_cpu

    @property
    def cpu_arch(self):
        """
        Gets the cpu_arch of this ServerTypeCPU.


        :return: The cpu_arch of this ServerTypeCPU.
        :rtype: str
        """
        return self._cpu_arch

    @cpu_arch.setter
    def cpu_arch(self, cpu_arch):
        """
        Sets the cpu_arch of this ServerTypeCPU.


        :param cpu_arch: The cpu_arch of this ServerTypeCPU.
        :type: str
        """
        
        self._cpu_arch = cpu_arch

    @property
    def href(self):
        """
        Gets the href of this ServerTypeCPU.


        :return: The href of this ServerTypeCPU.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this ServerTypeCPU.


        :param href: The href of this ServerTypeCPU.
        :type: str
        """
        
        self._href = href

    @property
    def _class(self):
        """
        Gets the _class of this ServerTypeCPU.


        :return: The _class of this ServerTypeCPU.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """
        Sets the _class of this ServerTypeCPU.


        :param _class: The _class of this ServerTypeCPU.
        :type: str
        """
        
        self.__class = _class

    @property
    def cpu_perf(self):
        """
        Gets the cpu_perf of this ServerTypeCPU.


        :return: The cpu_perf of this ServerTypeCPU.
        :rtype: str
        """
        return self._cpu_perf

    @cpu_perf.setter
    def cpu_perf(self, cpu_perf):
        """
        Sets the cpu_perf of this ServerTypeCPU.


        :param cpu_perf: The cpu_perf of this ServerTypeCPU.
        :type: str
        """
        
        self._cpu_perf = cpu_perf

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other


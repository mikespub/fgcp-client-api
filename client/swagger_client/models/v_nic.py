# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class VNic(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        VNic - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'nic_no': 'str',
            'private_ip': 'str',
            'network_id': 'str',
            'href': 'str',
            '_class': 'str',
            'id': 'str'
        }

        self.attribute_map = {
            'nic_no': 'nicNo',
            'private_ip': 'privateIp',
            'network_id': 'networkId',
            'href': 'href',
            '_class': '_class',
            'id': 'id'
        }

        self._nic_no = None
        self._private_ip = None
        self._network_id = None
        self._href = None
        self.__class = None
        self._id = None

    @property
    def nic_no(self):
        """
        Gets the nic_no of this VNic.


        :return: The nic_no of this VNic.
        :rtype: str
        """
        return self._nic_no

    @nic_no.setter
    def nic_no(self, nic_no):
        """
        Sets the nic_no of this VNic.


        :param nic_no: The nic_no of this VNic.
        :type: str
        """
        
        self._nic_no = nic_no

    @property
    def private_ip(self):
        """
        Gets the private_ip of this VNic.


        :return: The private_ip of this VNic.
        :rtype: str
        """
        return self._private_ip

    @private_ip.setter
    def private_ip(self, private_ip):
        """
        Sets the private_ip of this VNic.


        :param private_ip: The private_ip of this VNic.
        :type: str
        """
        
        self._private_ip = private_ip

    @property
    def network_id(self):
        """
        Gets the network_id of this VNic.


        :return: The network_id of this VNic.
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """
        Sets the network_id of this VNic.


        :param network_id: The network_id of this VNic.
        :type: str
        """
        
        self._network_id = network_id

    @property
    def href(self):
        """
        Gets the href of this VNic.


        :return: The href of this VNic.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this VNic.


        :param href: The href of this VNic.
        :type: str
        """
        
        self._href = href

    @property
    def _class(self):
        """
        Gets the _class of this VNic.


        :return: The _class of this VNic.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """
        Sets the _class of this VNic.


        :param _class: The _class of this VNic.
        :type: str
        """
        
        self.__class = _class

    @property
    def id(self):
        """
        Gets the id of this VNic.


        :return: The id of this VNic.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this VNic.


        :param id: The id of this VNic.
        :type: str
        """
        
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other


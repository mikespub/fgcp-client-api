# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ServerType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ServerType - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'expected_usage': 'str',
            'memory': 'str',
            'product_id': 'str',
            'price': 'str',
            'name': 'str',
            'charge_type': 'str',
            'cpu': 'ServerTypeCPU',
            'href': 'str',
            '_class': 'str',
            'id': 'str',
            'product_name': 'str'
        }

        self.attribute_map = {
            'expected_usage': 'expectedUsage',
            'memory': 'memory',
            'product_id': 'productId',
            'price': 'price',
            'name': 'name',
            'charge_type': 'chargeType',
            'cpu': 'cpu',
            'href': 'href',
            '_class': '_class',
            'id': 'id',
            'product_name': 'productName'
        }

        self._expected_usage = None
        self._memory = None
        self._product_id = None
        self._price = None
        self._name = None
        self._charge_type = None
        self._cpu = None
        self._href = None
        self.__class = None
        self._id = None
        self._product_name = None

    @property
    def expected_usage(self):
        """
        Gets the expected_usage of this ServerType.


        :return: The expected_usage of this ServerType.
        :rtype: str
        """
        return self._expected_usage

    @expected_usage.setter
    def expected_usage(self, expected_usage):
        """
        Sets the expected_usage of this ServerType.


        :param expected_usage: The expected_usage of this ServerType.
        :type: str
        """
        
        self._expected_usage = expected_usage

    @property
    def memory(self):
        """
        Gets the memory of this ServerType.


        :return: The memory of this ServerType.
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """
        Sets the memory of this ServerType.


        :param memory: The memory of this ServerType.
        :type: str
        """
        
        self._memory = memory

    @property
    def product_id(self):
        """
        Gets the product_id of this ServerType.


        :return: The product_id of this ServerType.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this ServerType.


        :param product_id: The product_id of this ServerType.
        :type: str
        """
        
        self._product_id = product_id

    @property
    def price(self):
        """
        Gets the price of this ServerType.


        :return: The price of this ServerType.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this ServerType.


        :param price: The price of this ServerType.
        :type: str
        """
        
        self._price = price

    @property
    def name(self):
        """
        Gets the name of this ServerType.


        :return: The name of this ServerType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ServerType.


        :param name: The name of this ServerType.
        :type: str
        """
        
        self._name = name

    @property
    def charge_type(self):
        """
        Gets the charge_type of this ServerType.


        :return: The charge_type of this ServerType.
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """
        Sets the charge_type of this ServerType.


        :param charge_type: The charge_type of this ServerType.
        :type: str
        """
        
        self._charge_type = charge_type

    @property
    def cpu(self):
        """
        Gets the cpu of this ServerType.


        :return: The cpu of this ServerType.
        :rtype: ServerTypeCPU
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """
        Sets the cpu of this ServerType.


        :param cpu: The cpu of this ServerType.
        :type: ServerTypeCPU
        """
        
        self._cpu = cpu

    @property
    def href(self):
        """
        Gets the href of this ServerType.


        :return: The href of this ServerType.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this ServerType.


        :param href: The href of this ServerType.
        :type: str
        """
        
        self._href = href

    @property
    def _class(self):
        """
        Gets the _class of this ServerType.


        :return: The _class of this ServerType.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """
        Sets the _class of this ServerType.


        :param _class: The _class of this ServerType.
        :type: str
        """
        
        self.__class = _class

    @property
    def id(self):
        """
        Gets the id of this ServerType.


        :return: The id of this ServerType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ServerType.


        :param id: The id of this ServerType.
        :type: str
        """
        
        self._id = id

    @property
    def product_name(self):
        """
        Gets the product_name of this ServerType.


        :return: The product_name of this ServerType.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """
        Sets the product_name of this ServerType.


        :param product_name: The product_name of this ServerType.
        :type: str
        """
        
        self._product_name = product_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

